#Copyright 2010-2011 SBA Research gGmbH
#
#     This file is part of FBCrawl.
#
#    FBCrawl is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    FBCrawl is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with FBCrawl.  If not, see <http://www.gnu.org/licenses/>.
diff -rcNB --exclude=.svn --exclude=cpp ./java/client/src/com/thoughtworks/selenium/DefaultSelenium.java /tmp/selenium/trunk/java/client/src/com/thoughtworks/selenium/DefaultSelenium.java
*** ./java/client/src/com/thoughtworks/selenium/DefaultSelenium.java	Mon Apr  4 12:33:11 2011
--- /tmp/selenium/trunk/java/client/src/com/thoughtworks/selenium/DefaultSelenium.java	Mon Apr  4 12:23:42 2011
***************
*** 731,736 ****
--- 731,740 ----
          commandProcessor.getString("addCustomRequestHeader", new String[] {key, value});
      }
  
+     public void addSetCookie(String key, String value) {
+     	commandProcessor.getString("addSetCookie", new String[] {key, value});
+     }
+ 
      public String captureEntirePageScreenshotToString(String kwargs) {
  		return commandProcessor.getString("captureEntirePageScreenshotToString", new String[] {kwargs,});
  	}
diff -rcNB --exclude=.svn --exclude=cpp ./java/client/src/com/thoughtworks/selenium/Selenium.java /tmp/selenium/trunk/java/client/src/com/thoughtworks/selenium/Selenium.java
*** ./java/client/src/com/thoughtworks/selenium/Selenium.java	Mon Apr  4 12:33:11 2011
--- /tmp/selenium/trunk/java/client/src/com/thoughtworks/selenium/Selenium.java	Mon Apr  4 12:20:28 2011
***************
*** 1212,1217 ****
--- 1212,1225 ----
  */
  void addCustomRequestHeader(String key, String value);
  
+ /** Causes the Selenium server to add a cookie with the specified key and value to the next response. This only works if the browser is configured to use the built in Selenium proxy. Please note that, in contrast to addCustomRequestHeader, this Set-Cookie header will not persist over multiple HTTP responses. It is usually not desired to send the same Set-Cookie multiple times.
+ @param key The cookie name.
+ @param value The cookie value (which may also include variables such as Path and Max-Age).
+ @see <a href="http://www.ietf.org/rfc/rfc2109.txt">RFC 2109 HTTP State Management Mechanism</a>
+ */
+ void addSetCookie(String key, String value);
+ 
+ 
      /** Downloads a screenshot of the browser current window canvas to a
  based 64 encoded PNG file. The <em>entire</em> windows canvas is captured,
  including parts rendered outside of the current view port.
diff -rcNB --exclude=.svn --exclude=cpp ./java/server/src/org/openqa/jetty/http/HttpFields.java /tmp/selenium/trunk/java/server/src/org/openqa/jetty/http/HttpFields.java
*** ./java/server/src/org/openqa/jetty/http/HttpFields.java	Mon Apr  4 12:33:10 2011
--- /tmp/selenium/trunk/java/server/src/org/openqa/jetty/http/HttpFields.java	Mon Apr  4 12:21:43 2011
***************
*** 1440,1447 ****
--- 1440,1453 ----
      /** Format a set cookie value
       * @param cookie The cookie.
       */
+ 
      public void addSetCookie(Cookie cookie)
      {
+ 	this.addSetCookie(cookie, false);
+     }
+ 
+     public void addSetCookie(Cookie cookie, boolean preformatted)
+     {
          String name=cookie.getName();
          String value=cookie.getValue();
          int version=cookie.getVersion();
***************
*** 1451,1459 ****
              throw new IllegalArgumentException("Bad cookie name");
  
          // Format value and params
!         StringBuffer buf = new StringBuffer(128);
!         String name_value_params=null;
!         synchronized(buf)
          {
              buf.append(name);
              buf.append('=');
--- 1457,1468 ----
              throw new IllegalArgumentException("Bad cookie name");
  
          // Format value and params
!         String name_value_params = name + "=" + value;
!        
!        	if(!preformatted)
! 	{
! 	StringBuffer buf = new StringBuffer(128);
! 	synchronized(buf)
          {
              buf.append(name);
              buf.append('=');
***************
*** 1518,1523 ****
--- 1527,1534 ----
              
              name_value_params = buf.toString();
          }
+ 	}
+ 
          put(__Expires,__01Jan1970);
          add(__SetCookie,name_value_params);
      }
diff -rcNB --exclude=.svn --exclude=cpp ./java/server/src/org/openqa/jetty/http/HttpResponse.java /tmp/selenium/trunk/java/server/src/org/openqa/jetty/http/HttpResponse.java
*** ./java/server/src/org/openqa/jetty/http/HttpResponse.java	Mon Apr  4 12:33:10 2011
--- /tmp/selenium/trunk/java/server/src/org/openqa/jetty/http/HttpResponse.java	Mon Apr  4 12:21:53 2011
***************
*** 406,413 ****
      public void addSetCookie(String name,
                               String value)
      {
!         _header.addSetCookie(new Cookie(name,value));
      }
      
      /* -------------------------------------------------------------- */
      /** Add a Set-Cookie field.
--- 406,421 ----
      public void addSetCookie(String name,
                               String value)
      {
!         this.addSetCookie(new Cookie(name,value));
      }
+ 
+    public void addSetCookie(String name,
+                              String value,
+ 			    boolean preformatted)
+     {
+         this.addSetCookie(new Cookie(name,value), preformatted);
+     }   
+  
      
      /* -------------------------------------------------------------- */
      /** Add a Set-Cookie field.
***************
*** 416,421 ****
--- 424,434 ----
      {
          _header.addSetCookie(cookie);
      }
+ 
+     public void addSetCookie(Cookie cookie, boolean preformatted)
+     {
+     	_header.addSetCookie(cookie, preformatted);
+     }
      
  
      /* ------------------------------------------------------------ */
diff -rcNB --exclude=.svn --exclude=cpp ./java/server/src/org/openqa/selenium/server/ProxyHandler.java /tmp/selenium/trunk/java/server/src/org/openqa/selenium/server/ProxyHandler.java
*** ./java/server/src/org/openqa/selenium/server/ProxyHandler.java	Mon Apr  4 12:33:10 2011
--- /tmp/selenium/trunk/java/server/src/org/openqa/selenium/server/ProxyHandler.java	Mon Apr  4 12:22:18 2011
***************
*** 63,68 ****
--- 63,69 ----
  import org.openqa.selenium.server.browserlaunchers.ResourceExtractor;
  import org.openqa.selenium.server.commands.AddCustomRequestHeaderCommand;
  import org.openqa.selenium.server.commands.CaptureNetworkTrafficCommand;
+ import org.openqa.selenium.server.commands.AddSetCookieCommand;
  
  /* ------------------------------------------------------------ */
  
***************
*** 545,550 ****
--- 546,573 ----
          response.removeField(HttpFields.__ETag); // possible cksum?  Stop caching...
          response.removeField(HttpFields.__LastModified); // Stop caching...
  
+ 	String domain;
+ 	domain = request.getRootURL().toString();
+ 	
+ 	// Strip the scheme and port in order to get the domain.
+ 	int schemeIndex, portIndex;
+ 	schemeIndex = domain.lastIndexOf('/');
+ 	
+ 	if(-1 != schemeIndex)
+ 		domain = domain.substring(schemeIndex+1);
+ 
+ 	portIndex = domain.lastIndexOf(':');
+ 	if(-1 != portIndex)
+ 		domain = domain.substring(0, portIndex);
+ 
+ 	Map<String, String> setCookies = AddSetCookieCommand.getCookies(domain);
+ 	for (Map.Entry<String, String> e : setCookies.entrySet()) {
+             response.addSetCookie(e.getKey(), e.getValue(), true);
+         }
+ 
+ 	if(0 < setCookies.size())
+ 		log.info("Inserted cookies into response to " + response.getHttpRequest().getRequestLine());
+ 	
          // Handled
          long bytesCopied = -1;
          request.setHandled(true);
diff -rcNB --exclude=.svn --exclude=cpp ./java/server/src/org/openqa/selenium/server/SeleniumDriverResourceHandler.java /tmp/selenium/trunk/java/server/src/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
*** ./java/server/src/org/openqa/selenium/server/SeleniumDriverResourceHandler.java	Mon Apr  4 12:33:10 2011
--- /tmp/selenium/trunk/java/server/src/org/openqa/selenium/server/SeleniumDriverResourceHandler.java	Mon Apr  4 12:31:19 2011
***************
*** 44,49 ****
--- 44,50 ----
  import org.openqa.selenium.server.commands.CaptureScreenshotToStringCommand;
  import org.openqa.selenium.server.commands.RetrieveLastRemoteControlLogsCommand;
  import org.openqa.selenium.server.commands.SeleniumCoreCommand;
+ import org.openqa.selenium.server.commands.AddSetCookieCommand;
  import org.openqa.selenium.server.htmlrunner.HTMLLauncher;
  import org.openqa.selenium.server.log.LoggingManager;
  
***************
*** 476,481 ****
--- 477,485 ----
        case addCustomRequestHeader:
          results = new AddCustomRequestHeaderCommand(values.get(0), values.get(1)).execute();
          break;
+       case addSetCookie:
+       	results = new AddSetCookieCommand(values.get(0), values.get(1)).execute();
+ 	break;
        case keyDownNative:
          try {
            RobotRetriever.getRobot().keyPress(Integer.parseInt(values.get(0)));
diff -rcNB --exclude=.svn --exclude=cpp ./java/server/src/org/openqa/selenium/server/SpecialCommand.java /tmp/selenium/trunk/java/server/src/org/openqa/selenium/server/SpecialCommand.java
*** ./java/server/src/org/openqa/selenium/server/SpecialCommand.java	Mon Apr  4 12:33:10 2011
--- /tmp/selenium/trunk/java/server/src/org/openqa/selenium/server/SpecialCommand.java	Mon Apr  4 12:23:22 2011
***************
*** 12,17 ****
--- 12,18 ----
  	captureScreenshotToString,
  	captureNetworkTraffic,
  	addCustomRequestHeader,
+ 	addSetCookie,
  	keyDownNative,
  	keyUpNative,
  	keyPressNative,
diff -rcNB --exclude=.svn --exclude=cpp ./java/server/src/org/openqa/selenium/server/commands/AddSetCookieCommand.java /tmp/selenium/trunk/java/server/src/org/openqa/selenium/server/commands/AddSetCookieCommand.java
*** ./java/server/src/org/openqa/selenium/server/commands/AddSetCookieCommand.java	Thu Jan  1 01:00:00 1970
--- /tmp/selenium/trunk/java/server/src/org/openqa/selenium/server/commands/AddSetCookieCommand.java	Mon Apr  4 12:29:11 2011
***************
*** 0 ****
--- 1,54 ----
+ package org.openqa.selenium.server.commands;
+ 
+ import java.util.Map;
+ import java.util.concurrent.ConcurrentHashMap;
+ 
+ public class AddSetCookieCommand extends Command {
+     private static Map<String, String> cookies = new ConcurrentHashMap<String, String>();
+     private static Map<String, String> domains = new ConcurrentHashMap<String, String>();
+     private String key;
+     private String value;
+ 
+     public AddSetCookieCommand(String key, String value) {
+         this.key = key;
+         this.value = value;
+     }
+ 
+     public String execute() {
+         cookies.put(key, value);
+ 
+ 	// Try to find the "domain" field
+ 	for(String part : value.split(";"))
+ 	{
+ 		String pair[] = part.split("=");
+ 		if(pair.length==2)
+ 		{
+ 			// If this is the domain field, store it in the domains map
+ 			if(pair[0].trim().toLowerCase().equals("domain"))
+ 				domains.put(key, pair[1].trim());
+ 		}
+ 	}
+ 
+         return "OK,";
+     }
+ 
+     public static Map<String, String> getCookies(String domain) {
+ 	Map<String, String> retMap = new ConcurrentHashMap<String, String>();
+ 
+ 	// Only return the cookies whose domain is either undefined or matches the parameter
+ 	for(String entryKey : cookies.keySet())
+ 	{
+ 		String entryDomain = domains.get(entryKey);
+ 		if(null == entryDomain || domain.toLowerCase().contains(entryDomain.toLowerCase()))
+ 		{
+ 			retMap.put(entryKey, cookies.get(entryKey));
+ 
+ 			// Remove this cookie from our internal maps
+ 			cookies.remove(entryKey);
+ 			if(null!= entryDomain)
+ 				domains.remove(entryKey);
+ 		}
+ 	}
+ 	return retMap;
+     }
+ }
